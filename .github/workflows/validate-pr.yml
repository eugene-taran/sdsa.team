name: Validate Contexts Content

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  validate-json:
    name: Validate JSON Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Validate all JSON files
        run: |
          echo "üîç Validating JSON files..."
          node scripts/validate.js
          
      - name: Check for required files
        run: |
          echo "üìã Checking required files..."
          
          # Check if categories.json exists
          if [ ! -f "contexts/categories.json" ]; then
            echo "‚ùå Error: contexts/categories.json is missing"
            exit 1
          fi
          
          echo "‚úÖ All required files present"
          
      - name: Validate author attribution
        run: |
          echo "üë• Checking author attribution..."
          
          # Check if all JSON files have author metadata
          for file in $(find contexts/categories -name '*.json' -not -name 'manifest.json'); do
            if [ -f "$file" ]; then
              if ! jq -e '.metadata' "$file" > /dev/null 2>&1; then
                echo "‚ùå Error: $file is missing metadata section"
                exit 1
              fi
              if ! jq -e '.metadata.author' "$file" > /dev/null 2>&1; then
                echo "‚ùå Error: $file is missing author attribution"
                exit 1
              fi
            fi
          done
          
          # Check that categories in categories.json have corresponding folders
          if [ -f "contexts/categories.json" ]; then
            for path in $(jq -r '.categories[].path' contexts/categories.json); do
              if [ ! -d "contexts/categories/$path" ]; then
                echo "‚ùå Error: Category path 'contexts/categories/$path' does not exist"
                exit 1
              fi
            done
          fi
          
          echo "‚úÖ All files have author attribution"
          
      - name: Check resource references
        run: |
          echo "üìö Validating resource references..."
          
          # Create a Node.js script to check resource references
          cat > check-resources.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          let hasErrors = false;
          
          // Get all JSON files from categories
          const categoriesDir = path.join('contexts', 'categories');
          const resourcesDir = path.join('contexts', 'resources');
          
          function walkDir(dir) {
            let files = [];
            if (fs.existsSync(dir)) {
              fs.readdirSync(dir).forEach(item => {
                const fullPath = path.join(dir, item);
                const stat = fs.statSync(fullPath);
                if (stat.isDirectory()) {
                  files = files.concat(walkDir(fullPath));
                } else if (item.endsWith('.json') && item !== 'manifest.json') {
                  files.push(fullPath);
                }
              });
            }
            return files;
          }
          
          const jsonFiles = walkDir(categoriesDir);
          
          jsonFiles.forEach(filepath => {
            try {
              const content = fs.readFileSync(filepath, 'utf8');
              
              // Find all resource references (simple regex)
              const resourceMatches = content.match(/['"]([^'"]+\.md)['"]/g);
              
              if (resourceMatches) {
                resourceMatches.forEach(match => {
                  const resourceName = match.replace(/['"]/g, '');
                  const resourcePath = path.join(resourcesDir, resourceName);
                  
                  if (!fs.existsSync(resourcePath)) {
                    console.error(`‚ùå Error in ${filepath}: Referenced resource '${resourceName}' not found`);
                    hasErrors = true;
                  }
                });
              }
            } catch (e) {
              console.error(`‚ùå Error reading ${filepath}: ${e.message}`);
              hasErrors = true;
            }
          });
          
          if (!hasErrors) {
            console.log('‚úÖ All resource references are valid');
          }
          
          process.exit(hasErrors ? 1 : 0);
          EOF
          
          node check-resources.js
          
      - name: Summary
        if: always()
        run: |
          echo "üìä Validation Summary"
          echo "===================="
          if [ $? -eq 0 ]; then
            echo "‚úÖ All validations passed!"
            echo "Your pull request is ready for review."
          else
            echo "‚ùå Validation failed!"
            echo "Please fix the errors above before merging."
          fi