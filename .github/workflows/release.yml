name: Release Knowledge Content

on:
  push:
    branches: [main]
    paths:
      - 'knowledge/**'
      - '!knowledge/manifest.json'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Generate version
        id: version
        run: |
          DATE=$(date +%Y.%m.%d)
          # Find existing tags for today
          EXISTING_TAGS=$(git tag -l "v${DATE}.*" | sort -V || echo "")
          
          if [ -z "$EXISTING_TAGS" ]; then
            VERSION="${DATE}.0"
          else
            # Get the latest patch number
            LATEST_TAG=$(echo "$EXISTING_TAGS" | tail -n1)
            PATCH=$(echo $LATEST_TAG | sed "s/v${DATE}\.//" )
            VERSION="${DATE}.$((PATCH + 1))"
          fi
          
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
      
      - name: Update manifest
        run: |
          # Update version in manifest
          node -e "
            const fs = require('fs');
            const manifestPath = 'knowledge/manifest.json';
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            manifest.version = '${{ steps.version.outputs.version }}';
            manifest.released = new Date().toISOString();
            fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
            console.log('Updated manifest to version: ' + manifest.version);
          "
      
      - name: Calculate checksums
        run: |
          cd knowledge
          # Generate checksums for all files
          node -e "
            const fs = require('fs');
            const path = require('path');
            const crypto = require('crypto');
            
            function getChecksum(filePath) {
              const content = fs.readFileSync(filePath);
              return crypto.createHash('sha256').update(content).digest('hex');
            }
            
            function scanDirectory(dir, basePath = '') {
              const checksums = {};
              const files = fs.readdirSync(dir);
              
              files.forEach(file => {
                const fullPath = path.join(dir, file);
                const relativePath = path.join(basePath, file);
                const stat = fs.statSync(fullPath);
                
                if (stat.isDirectory()) {
                  Object.assign(checksums, scanDirectory(fullPath, relativePath));
                } else if (file !== 'manifest.json') {
                  checksums[relativePath] = getChecksum(fullPath);
                }
              });
              
              return checksums;
            }
            
            const checksums = scanDirectory('.');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.checksums = checksums;
            
            // Calculate total size
            const totalSize = Object.keys(checksums).reduce((sum, file) => {
              const stat = fs.statSync(file);
              return sum + stat.size;
            }, 0);
            manifest.size = Math.round(totalSize / 1024) + 'KB';
            
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
            console.log('Added checksums for ' + Object.keys(checksums).length + ' files');
          "
      
      - name: Commit manifest updates
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add knowledge/manifest.json
          git diff --cached --quiet || git commit -m "chore: update manifest for v${{ steps.version.outputs.version }} [skip ci]"
          git push origin main
      
      - name: Create release bundles
        run: |
          cd knowledge
          tar -czf ../knowledge-bundle-${{ steps.version.outputs.version }}.tar.gz .
          zip -r ../knowledge-bundle-${{ steps.version.outputs.version }}.zip . -q
          
          # Also create latest versions
          cp ../knowledge-bundle-${{ steps.version.outputs.version }}.tar.gz ../knowledge-bundle-latest.tar.gz
          cp ../knowledge-bundle-${{ steps.version.outputs.version }}.zip ../knowledge-bundle-latest.zip
      
      - name: Generate changelog
        run: |
          cat > CHANGELOG.md << EOF
          ## ðŸš€ Knowledge Content Release v${{ steps.version.outputs.version }}
          
          ### ðŸ“… Released
          $(date -u +"%Y-%m-%d %H:%M UTC")
          
          ### ðŸ“¦ Bundle Downloads
          - [knowledge-bundle-${{ steps.version.outputs.version }}.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/knowledge-bundle-${{ steps.version.outputs.version }}.tar.gz)
          - [knowledge-bundle-${{ steps.version.outputs.version }}.zip](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/knowledge-bundle-${{ steps.version.outputs.version }}.zip)
          
          ### ðŸ“Š Statistics
          - Total knowledge blocks: $(find knowledge/blocks -name "*.yaml" 2>/dev/null | wc -l || echo 0)
          - Total resources: $(find knowledge/resources -name "*.md" 2>/dev/null | wc -l || echo 0)
          
          ### ðŸ”— Quick Links
          - [View Manifest](https://raw.githubusercontent.com/${{ github.repository }}/main/knowledge/manifest.json)
          - [View Catalog](https://raw.githubusercontent.com/${{ github.repository }}/main/knowledge/catalog.json)
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Knowledge Content v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            knowledge-bundle-*.tar.gz
            knowledge-bundle-*.zip
          draft: false
          prerelease: false
      
      - name: Update latest tag
        run: |
          git tag -f latest
          git push origin latest --force